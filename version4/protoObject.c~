#include "CONNAC.h"
#include "conn.h"
#include "debug.h"
#include "information.pb-c.h"
#include "connPutPerflowAckMsg.pb-c.h"
#include "actionPutPerflowAckMsg.pb-c.h"
#include "connGetPerflowAckMsg.pb-c.h"
#include "actionGetPerflowAckMsg.pb-c.h"
#include "person.pb-c.h"
#include "protoObject.h"
#include "syn.pb-c.h"

#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <json/json.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pcap.h>
#include <stdint.h>


#define CONTENT_LEN 32
#define HEAD_LENGTH 4

ProtoObject* make_proto_object(int len, uint8_t* buf, int message_type ){
	
	ProtoObject *proto_object;
    	proto_object = (ProtoObject *)malloc(sizeof(ProtoObject));	
	
	//printf("message %d\n",message_type);
	proto_object->length = len;
	proto_object->buf = buf;
	proto_object->message_type=message_type;

	return proto_object;
}

ProtoObject* proto_compose_syn_message(){
	Syn syn = SYN__INIT;

	int pid = getpid();
        char host[1024];
        memset(host, 0, 1024);
        gethostname(host, 1024);
        printf("hostname %s\n", host);
        printf("pid %d\n",pid);

    	syn.pid=pid;
    	syn.host = (char*)malloc(CONTENT_LEN);
    	syn.host=host;

    	//check info length  
    	unsigned int len;
    	len = syn__get_packed_size(&syn);
    	printf("send size of syn : %u\n", len);
 
    	//use length to malloc a space, check pb-c.h to know the buf pointer type
    	//here is uint8_t  buf   
    	uint8_t * buf = NULL;
    	buf = (uint8_t*)malloc(len);
    	syn__pack(&syn, buf);
	
	ProtoObject *syn_object;
    	syn_object = make_proto_object(len, buf,PROTO_SYN);	
	
	return syn_object;
	

}

ProtoObject* proto_compose_information_message(int personnum, char* content){
	Information info = INFORMATION__INIT;
    	info.personnum=personnum;
    	info.content = (char*)malloc(CONTENT_LEN);
    	info.content=content;

    	//check info length  
    	unsigned int len;
    	len = information__get_packed_size(&info);
    	printf("send size of info : %u\n", len);
 
    	//use length to malloc a space, check pb-c.h to know the buf pointer type
    	//here is uint8_t  buf   
    	uint8_t * buf = NULL;
    	buf = (uint8_t*)malloc(len);
    	information__pack(&info, buf);
	
	ProtoObject *info_object;
    	info_object = make_proto_object(len, buf,PROTO_INFORMATION);	
	
	return info_object;
	

}

ProtoObject* proto_compose_person_message(char* name, int age, char* address){
	Person info = PERSON__INIT;
	info.name = (char*)malloc(CONTENT_LEN);
    	info.name=name;
    	info.age=age;
    	info.address = (char*)malloc(CONTENT_LEN);
    	info.address=address;

    	//check info length  
    	unsigned int len;
    	len = person__get_packed_size(&info);
    	printf("send size of info : %u\n", len);
 
    	//use length to malloc a space, check pb-c.h to know the buf pointer type
    	//here is uint8_t  buf   
    	uint8_t * buf = NULL;
    	buf = (uint8_t*)malloc(len);
    	person__pack(&info, buf);

	ProtoObject *person_object;
    	person_object = make_proto_object(len, buf,PROTO_PERSON);	
	
	return person_object;

}


ProtoObject* proto_compose_conn_getPerflowack_message(int count){
	ConnGetPerflowAckMsg connGetPerflowAck = CONN_GET_PERFLOW_ACK_MSG__INIT;
    	connGetPerflowAck.count=count;
    	
    	//check info length  
    	unsigned int len;
    	len = conn_get_perflow_ack_msg__get_packed_size(&connGetPerflowAck);
    	printf("send getPerflowAck size of : %u\n", len);
 
    	//use length to malloc a space, check pb-c.h to know the buf pointer type
    	//here is uint8_t  buf   
    	uint8_t * buf = NULL;
    	buf = (uint8_t*)malloc(len);
    	conn_get_perflow_ack_msg__pack(&connGetPerflowAck, buf);
	
	ProtoObject *connGetPerflowAck_object;
    	connGetPerflowAck_object = make_proto_object(len, buf, PROTO_CONN_GETPERFLOWMSGACK);	
	
	return connGetPerflowAck_object;
	

}

ProtoObject* proto_compose_action_getPerflowack_message(int count){
	ActionGetPerflowAckMsg actionGetPerflowAck = ACTION_GET_PERFLOW_ACK_MSG__INIT;
    	actionGetPerflowAck.count=count;
    	
    	//check info length  
    	unsigned int len;
    	len = action_get_perflow_ack_msg__get_packed_size(&actionGetPerflowAck);
    	printf("send getPerflowAck size of : %u\n", len);
 
    	//use length to malloc a space, check pb-c.h to know the buf pointer type
    	//here is uint8_t  buf   
    	uint8_t * buf = NULL;
    	buf = (uint8_t*)malloc(len);
    	action_get_perflow_ack_msg__pack(&actionGetPerflowAck, buf);
	
	ProtoObject *actionGetPerflowAck_object;
    	actionGetPerflowAck_object = make_proto_object(len, buf, PROTO_ACTION_GETPERFLOWMSGACK);	
	
	return actionGetPerflowAck_object;
	

}



ProtoObject* proto_compose_conn_putPerflowack_message(int hash){
	ConnPutPerflowAckMsg connPutPerflowAck = CONN_PUT_PERFLOW_ACK_MSG__INIT;
    	connPutPerflowAck.hash=hash;
    	
    	//check info length  
    	unsigned int len;
    	len = conn_put_perflow_ack_msg__get_packed_size(&connPutPerflowAck);
    	printf("send size of info : %u\n", len);
 
    	//use length to malloc a space, check pb-c.h to know the buf pointer type
    	//here is uint8_t  buf   
    	uint8_t * buf = NULL;
    	buf = (uint8_t*)malloc(len);
    	conn_put_perflow_ack_msg__pack(&connPutPerflowAck, buf);
	
	ProtoObject *connPutPerflowAck_object;
    	connPutPerflowAck_object = make_proto_object(len, buf, PROTO_CONN_PUTPERFLOWMSGACK);	
	
	return connPutPerflowAck_object;
	

}

ProtoObject* proto_compose_action_putPerflowack_message(int hash){
	ActionPutPerflowAckMsg actionPutPerflowAck = ACTION_PUT_PERFLOW_ACK_MSG__INIT;
    	actionPutPerflowAck.hash=hash;
    	
    	//check info length  
    	unsigned int len;
    	len = action_put_perflow_ack_msg__get_packed_size(&actionPutPerflowAck);
    	printf("send size of info : %u\n", len);
 
    	//use length to malloc a space, check pb-c.h to know the buf pointer type
    	//here is uint8_t  buf   
    	uint8_t * buf = NULL;
    	buf = (uint8_t*)malloc(len);
    	action_put_perflow_ack_msg__pack(&actionPutPerflowAck, buf);
	
	ProtoObject *actionPutPerflowAck_object;
    	actionPutPerflowAck_object = make_proto_object(len, buf, PROTO_ACTION_PUTPERFLOWMSGACK);	
	
	return actionPutPerflowAck_object;
	

}



int send_proto_object(int conn, ProtoObject* proto_object){


        struct timeval start_serialize, end_serialize, end_encode;
        gettimeofday(&start_serialize, NULL);    

	
	uint8_t* buf = proto_object->buf;
	int len = proto_object->length;
	uint8_t type = proto_object->message_type;
	printf("type %x\n",type);

	if(buf == NULL){
		return -1;
	}

	//create a new buf, add prefix before info
    	uint8_t *new_buf = NULL;
	//new_buf = (uint8_t*)malloc(len+HEAD_LENGTH);
	new_buf = (uint8_t*)malloc(HEAD_LENGTH);
    	new_buf[0] = len & 0xff;
    	new_buf[1] = (len>>8)&0xff;
    	new_buf[2] = 0;
    	new_buf[3] = type ;
   	// int m;
    	//for(m = HEAD_LENGTH; m < len+HEAD_LENGTH; m++){
	//new_buf[m] = buf[m-HEAD_LENGTH];
	//}
       
        gettimeofday(&end_encode, NULL);
        long sec = end_encode.tv_sec - start_serialize.tv_sec;
        long usec = end_encode.tv_usec - start_serialize.tv_usec;
        long total = (sec * 1000 * 1000) + usec;
        printf("SEND STATS: PERFLOW: TIME TO Encode PROTO OBJECT = %ldus\n", total);

	//int result = conn_write(conn, new_buf, len+HEAD_LENGTH);
        int result_1 = conn_write(conn, new_buf, HEAD_LENGTH);
	int result_2 = conn_write(conn, buf, len);

 	free(new_buf);
	
	gettimeofday(&end_serialize, NULL);
        sec = end_serialize.tv_sec - start_serialize.tv_sec;
        usec = end_serialize.tv_usec - start_serialize.tv_usec;
        total = (sec * 1000 * 1000) + usec;
        printf("SEND STATS: PERFLOW: TIME TO SEND PROTO OBJECT = %ldus\n", total);

	return result_2;
}








	
